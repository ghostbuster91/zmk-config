/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NAV 1
#define SYM 2
#define NUM 3
#define FN 4

#define LAUNCHER (LG(SPACE))
#define CTRL_TAB (LC(TAB))
#define C_S_TAB (LC(LS(TAB)))
#define ELLIPSIS (LA(SEMICOLON))

#define SPC_PREVIOUS (LC(LA(LEFT)))
#define S_PRV SPC_PREVIOUS

#define SPC_NEXT (LC(LA(RIGHT)))
#define S_NXT SPC_NEXT

#define STAB (LS(TAB))
#define CTAB (LC(TAB))
#define CSTAB (LC(LS(TAB)))

/ {

  chosen {
    zmk,battery = &vbatt;
  };

  vbatt: vbatt {
      compatible = "zmk,battery-nrf-vddh";
      label = "VBATT";
  };

  behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
      &none     &kp Q      &kp W      &kp F        &kp P        &kp B                     &kp J      &kp L       &kp U       &kp Y      &kp SEMI   &none
      &kp Q     &hm LGUI A &hm LALT R &hm LSHFT S  &hm LCTRL T  &hm RALT G                &hm RALT M &hm RCTRL N &hm RSHFT E &hm LALT I &hm RGUI O &kp APOS
      &kp Q     &kp Z      &kp X      &kp C        &kp D        &kp V                     &kp K      &kp H       &kp COMMA   &kp DOT    &kp QMARK  &none
                                      &lt NUM TAB  &lt NAV BSPC &lt FN DEL                &kp ENTER  &lt SYM SPACE &kp Q
      >;
    };

    nav_layer {
      bindings = <
      &trans    &trans     &trans     &trans       &trans       &trans                    &trans     &trans      &kp HOME    &kp END    &trans     &none
      &none     &sk LGUI   &sk LALT   &sk LSHFT    &sk LCTRL    &sk RALT                  &kp RIGHT  &kp DOWN    &kp UP      &kp LEFT   &trans     &none
      &none     &trans     &trans     &trans       &trans       &kp PSCRN                 &trans     &trans      &trans      &trans     &trans     &none 
                                      &trans       &trans       &trans                    &trans     &trans      &trans  
      >;
    };

   symbols_layer {
      bindings = <
      &none     &kp APOS   &kp LT     &kp GT       &kp DQT      &kp DOT                   &kp AMPS   &kp UNDER   &kp LBRC    &kp RBRC   &kp PRCNT  &none
      &kp TAB   &kp EXCL   &kp MINUS  &kp PLUS     &kp EQUAL    &kp HASH                  &kp PIPE   &kp COLON   &kp LPAR    &kp RPAR   &kp SEMI   &kp DQT
      &kp STAB  &kp CARET  &kp FSLH   &kp STAR     &kp BSLH     &kp AT                    &kp TILDE  &kp DLLR    &kp LBKT    &kp RBKT   &kp QMARK  &none
                                      &trans       &trans       &trans                    &trans     &trans      &trans
      >;
    };

    num_layer {
      bindings = <
      &none     &none      &none      &none        &none        &none                     &none      &kp N7      &kp N8      &kp N9     &none      &none
      &kp CTAB  &kp LGUI   &sk LALT   &sk LSHFT    &sk LCTRL    &sk RALT                  &none      &kp N4      &kp N5      &kp N6     &kp N0     &none
      &kp CSTAB &none      &none      &none        &none        &none                     &none      &kp N1      &kp N2      &kp N3     &none      &none 
                                      &trans       &trans       &trans                    &trans     &trans      &trans
      >;
    };

    fn_layer {
      bindings = <
      &none     &none      &none      &none        &none        &none                     &none      &kp F7      &kp F8      &kp F9     &kp F12    &none
      &none     &kp LGUI   &sk LALT   &sk LSHFT    &sk LCTRL    &sk RALT                  &none      &kp F4      &kp F5      &kp F6     &kp F11    &none
      &none     &none      &none      &none        &none        &none                     &none      &kp F1      &kp F2      &kp F3     &kp F10    &none 
                                      &trans       &trans       &trans                    &trans     &trans      &trans
      >;
    };
  };
};
